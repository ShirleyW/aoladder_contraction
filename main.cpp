#include <iostream>


void aoladder_contraction(
        int& array_slot_1, int& rank_1, int * index_values_1, int& size_1, 
        int * extents_1, double * data_1, 
        int& array_slot_2, int& rank_2, int * index_values_2, int& size_2, 
        int * extents_2, double * data_2, 
        int& array_slot_3, int& rank_3, int * index_values_3, int& size_3, 
        int * extents_3, double * data_3, int& ierr);


int main (int argc, char **argv){
    int ierr;

    const int a0 = 4;
    const int a1 = 4;
    const int a2 = 4;
    const int a3 = 9;

    const int b0 = 4;
    const int b1 = 4;
    const int b2 = 4;
    const int b3 = 4;

    const int c0 = 4;
    const int c1 = 4;
    const int c2 = 9;
    const int c3 = 4;

    int dummy_slot = -1;
    int dummy_index_values[4] = {-1, -1, -1, -1};

    int rank_0 = 4;
    int size_0 = a0 * a1 * a2 * a3;
    int extents_0[] = {a0, a1, a2, a3};
    double data_0[a0][a1][a2][a3] = {0};

    int rank_1 = 4;
    int size_1 = b0 * b1 * b2 * b3;
    int extents_1[] = {b0, b1, b2, b3};
    double data_1[b0][b1][b2][b3] = { 
        -2.06848e-06,-1.45573e-05,-3.81082e-05,4.45188e-05,
        -1.99738e-06,-1.40813e-05,-3.73384e-05,4.25935e-05,
        1.12557e-06,7.92852e-06,2.08902e-05,-2.40788e-05,
        1.10121e-06,7.75991e-06,2.05421e-05,-2.35726e-05,
        -1.45573e-05,-0.000102455,-0.00026831,0.000313211,
        -1.40813e-05,-9.92671e-05,-0.000263129,0.000300373,
        7.92854e-06,5.58474e-05,0.000147136,-0.000169646,
        7.7608e-06,5.46886e-05,0.000144773,-0.000166099,
        -3.81082e-05,-0.00026831,-0.000704616,0.000818146,
        -3.73384e-05,-0.000263129,-0.000695873,0.000798057,
        2.08915e-05,0.000147145,0.000387564,-0.000447508,
        2.0561e-05,0.000144889,0.000383342,-0.000439743,
        4.45188e-05,0.000313211,0.000818146,-0.000960057,
        4.25936e-05,0.000300373,0.000798058,-0.000906497,
        -2.4079e-05,-0.000169647,-0.000447479,0.000514189,
        -2.35562e-05,-0.000165965,-0.000439036,0.000505056,
        -1.99738e-06,-1.40813e-05,-3.73384e-05,4.25936e-05,
        -2.06846e-06,-1.45572e-05,-3.8108e-05,4.45185e-05,
        1.10106e-06,7.75881e-06,2.0539e-05,-2.35697e-05,
        1.12567e-06,7.92922e-06,2.08924e-05,-2.40804e-05,
        -1.40813e-05,-9.92671e-05,-0.000263129,0.000300373,
        -1.45572e-05,-0.000102455,-0.000268308,0.000313209,
        7.75971e-06,5.46808e-05,0.000144751,-0.000166079,
        7.92922e-06,5.58524e-05,0.000147151,-0.000169658,
        -3.73384e-05,-0.000263129,-0.000695873,0.000798058,
        -3.8108e-05,-0.000268308,-0.000704613,0.000818141,
        2.05581e-05,0.000144869,0.000383286,-0.000439687,
        2.08934e-05,0.000147158,0.000387603,-0.000447543,
        4.25935e-05,0.000300373,0.000798057,-0.000906497,
        4.45185e-05,0.000313209,0.000818141,-0.000960049,
        -2.35529e-05,-0.000165941,-0.000438971,0.000504993,
        -2.40809e-05,-0.000169661,-0.000447525,0.00051422,
        1.12557e-06,7.92854e-06,2.08915e-05,-2.4079e-05,
        1.10106e-06,7.75971e-06,2.05581e-05,-2.35529e-05,
        -2.74402e-05,-0.000193211,-0.000507647,0.000588856,
        -2.66848e-05,-0.000188143,-0.000499559,0.000568825,
        7.92852e-06,5.58474e-05,0.000147145,-0.000169647,
        7.75881e-06,5.46808e-05,0.000144869,-0.000165941,
        -0.000193211,-0.00136049,-0.00357567,0.00414527,
        -0.000188143,-0.00132646,-0.00352107,0.00401141,
        2.08902e-05,0.000147136,0.000387564,-0.000447479,
        2.0539e-05,0.000144751,0.000383286,-0.000438971,
        -0.000507647,-0.00357567,-0.0094199,0.0108734,
        -0.00049956,-0.00352108,-0.00932811,0.0106668,
        -2.40788e-05,-0.000169646,-0.000447508,0.000514189,
        -2.35697e-05,-0.000166079,-0.000439687,0.000504993,
        0.000588856,0.00414527,0.0108734,-0.0126541,
        0.000568826,0.00401142,0.0106668,-0.0121093,
        1.10121e-06,7.7608e-06,2.0561e-05,-2.35562e-05,
        1.12567e-06,7.92922e-06,2.08934e-05,-2.40809e-05,
        -2.66848e-05,-0.000188143,-0.00049956,0.000568826,
        -2.74457e-05,-0.00019325,-0.00050775,0.000588972,
        7.75991e-06,5.46886e-05,0.000144889,-0.000165965,
        7.92922e-06,5.58524e-05,0.000147158,-0.000169661,
        -0.000188143,-0.00132646,-0.00352108,0.00401142,
        -0.00019325,-0.00136076,-0.0035764,0.0041461,
        2.05421e-05,0.000144773,0.000383342,-0.000439036,
        2.08924e-05,0.000147151,0.000387603,-0.000447525,
        -0.000499559,-0.00352107,-0.00932811,0.0106668,
        -0.00050775,-0.0035764,-0.0094218,0.0108756,
        -2.35726e-05,-0.000166099,-0.000439743,0.000505056,
        -2.40804e-05,-0.000169658,-0.000447543,0.00051422,
        0.000568825,0.00401141,0.0106668,-0.0121093,
        0.000588972,0.0041461,0.0108756,-0.0126565 
    };

    int rank_2 = 4;
    int size_2 = c0 * c1 * c2 * c3;
    int extents_2[] = {c0, c1, c2, c3};
    double data_2[c0][c1][c2][c3] = {0};


    aoladder_contraction(dummy_slot, rank_0, dummy_index_values, 
                            size_0, extents_0, &data_0[0][0][0][0],
                        dummy_slot, rank_1, dummy_index_values, 
                            size_1, extents_1, &data_1[0][0][0][0],
                        dummy_slot, rank_2, dummy_index_values, 
                            size_2, extents_2, &data_2[0][0][0][0],
                        ierr);



    return 0;
}

