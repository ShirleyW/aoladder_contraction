#include <iostream>

extern "C" {
    void aoladder_contraction(
            int& array_slot_1, int& rank_1, int * index_values_1, int& size_1, 
            int * extents_1, double * data_1, 
            int& array_slot_2, int& rank_2, int * index_values_2, int& size_2, 
            int * extents_2, double * data_2, 
            int& array_slot_3, int& rank_3, int * index_values_3, int& size_3, 
            int * extents_3, double * data_3, int& ierr);
}


int main (int argc, char **argv){

    const double THRESHOLD = 1e-10;

    int ierr;

    const int a0 = 4;
    const int a1 = 4;
    const int a2 = 4;
    const int a3 = 9;

    const int b0 = 4;
    const int b1 = 4;
    const int b2 = 4;
    const int b3 = 4;

    const int c0 = 4;
    const int c1 = 4;
    const int c2 = 9;
    const int c3 = 4;

    int dummy_slot = -1;
    int dummy_index_values[4] = {-1, -1, -1, -1};

    int rank_0 = 4;
    int size_0 = a0 * a1 * a2 * a3;
    int extents_0[] = {a0, a1, a2, a3};
    double data_0[a0][a1][a2][a3] = {
        0,     0,     0,     0,
        0,     0,     0,     0,
        0,     0,     0,     0,
        0,     0,     0,     0,
        0,     0,     0,     0,
        0,     0,     0,     0,
        0,     0,     0,     0,
        0,     0,     0,     0,
        0,     0,     0,     0,
        0,     0,     0,     0,
        0,     0,     0,     0,
        0,     0,     0,     0,
        0,     0,     0,     0,
        0,     0,     0,     0,
        0,     0,     0,     0,
        0,     0,     0,     0,
        0,     0,     0,     0,
        0,     0,     0,     0,
        0,     0,     0,     0,
        0,     0,     0,     0,
        0,     0,     0,     0,
        0,     0,     0,     0,
        0,     0,     0,     0,
        0,     0,     0,     0,
        0,     0,     0,     0,
        0,     0,     0,     0,
        0,     0,     0,     0,
        0,     0,     0,     0,
        0,     0,     0,     0,
        0,     0,     0,     0,
        0,     0,     0,     0,
        0,     0,     0,     0,
        0,     0,     0,     0,
        0,     0,     0,     0,
        0,     0,     0,     0,
        0,     0,     0,     0,
        0,     0,     0,     0,
        0,     0,     0,     0,
        0,     0,     0,     0,
        0,     0,     0,     0,
        0,     0,     0,     0,
        0,     0,     0,     0,
        0,     0,     0,     0,
        0,     0,     0,     0,
        0,     0,     0,     0,
        0,     0,     0,     0,
        0,     0,     0,     0,
        0,     0,     0,     0,
        0,     0,     0,     0,
        0,     0,     0,     0,
        0,     0,     0,     0,
        0,     0,     0,     0,
        0,     0,     0,     0,
        0,     0,     0,     0,
        0,     0,     0,     0,
        0,     0,     0,     0,
        0,     0,     0,     0,
        0,     0,     0,     0,
        0,     0,     0,     0,
        0,     0,     0,     0,
        0,     0,     0,     0,
        0,     0,     0,     0,
        0,     0,     0,     0,
        0,     0,     0,     0,
        0,     0,     0,     0,
        0,     0,     0,     0,
        0,     0,     0,     0,
        0,     0,     0,     0,
        0,     0,     0,     0,
        0,     0,     0,     0,
        0,     0,     0,     0,
        0,     0,     0,     0,
        0,     0,     0,     0,
        0,     0,     0,     0,
        0,     0,     0,     0,
        0,     0,     0,     0,
        0,     0,     0,     0,
        0,     0,     0,     0,
        0,     0,     0,     0,
        0,     0,     0,     0,
        -3.39396e-06,2.57013e-07,-7.41571e-08,-1.23977e-07,
        2.57013e-07,-1.44407e-06,1.85351e-07,-3.45566e-07,
        -7.41571e-08,1.85351e-07,-5.39001e-07,-3.88803e-07,
        -1.23977e-07,-3.45566e-07,-3.88803e-07,-4.80287e-07,
        -1.01193e-05,-8.35353e-09,5.28417e-09,-4.79357e-07,
        -8.35353e-09,-9.3776e-06,4.52581e-07,-2.82507e-06,
        5.28417e-09,4.52581e-07,-5.89449e-06,-4.92457e-06,
        -4.79357e-07,-2.82507e-06,-4.92457e-06,-5.5709e-06,
        0.000151389,2.02143e-09,-1.39343e-09,7.17743e-06,
        2.02143e-09,0.000151216,-1.29769e-08,5.06409e-05,
        -1.39343e-09,-1.29769e-08,0.000152725,0.00013859,
        7.17743e-06,5.06409e-05,0.00013859,0.000153497,
        0.000274189,1.07258e-08,-2.70352e-09,1.30017e-05,
        1.07258e-08,0.000274414,1.50577e-07,9.20136e-05,
        -2.70352e-09,1.50577e-07,0.000276767,0.000250855,
        1.30017e-05,9.20136e-05,0.000250855,0.000277523,
        -7.22005e-05,5.57847e-06,-1.60961e-06,-2.62147e-06,
        5.57847e-06,-2.98855e-05,4.02056e-06,-7.01388e-06,
        -1.60961e-06,4.02056e-06,-1.02554e-05,-7.13456e-06,
        -2.62147e-06,-7.01388e-06,-7.13456e-06,-8.98164e-06,
        -0.000184714,-1.82239e-07,1.14834e-07,-8.74868e-06,
        -1.82239e-07,-0.000168668,9.7654e-06,-4.96807e-05,
        1.14834e-07,9.7654e-06,-9.38251e-05,-7.61524e-05,
        -8.74868e-06,-4.96807e-05,-7.61524e-05,-8.69584e-05,
        0.00143541,4.47395e-08,-2.94722e-08,6.80514e-05,
        4.47395e-08,0.00143168,-3.10618e-07,0.000479402,
        -2.94722e-08,-3.10618e-07,0.00146026,0.0013285,
        6.80514e-05,0.000479402,0.0013285,0.00147301,
        0.00261399,2.33776e-07,-5.76884e-08,0.000123974,
        2.33776e-07,0.00261886,3.23743e-06,0.000879452,
        -5.76884e-08,3.23743e-06,0.00266548,0.00241971,
        0.000123974,0.000879452,0.00241971,0.00267715,
        0.00456017,-0.00035819,0.000103348,0.000164727,
        -0.00035819,0.00184205,-0.000258533,0.000424349,
        0.000103348,-0.000258533,0.000579423,0.000386356,
        0.000164727,0.000424349,0.000386356,0.00049753,
        0.0106477,1.15641e-05,-7.3528e-06,0.000504225,
        1.15641e-05,0.00960935,-0.000635758,0.00277482,
        -7.3528e-06,-0.000635758,0.00468943,0.00366336,
        0.000504225,0.00277482,0.00366336,0.00422483,
        0.0390723,-2.88073e-06,2.04331e-06,0.00185315,
        -2.88073e-06,0.0393128,1.53941e-05,0.0131694,
        2.04331e-06,1.53941e-05,0.0368581,0.032569,
        0.00185315,0.0131694,0.032569,0.0354544,
        0.0513753,-1.51076e-05,3.91602e-06,0.00243377,
        -1.51076e-05,0.0510603,-0.000212816,0.0169472,
        3.91602e-06,-0.000212816,0.0474081,0.0420046,
        0.00243377,0.0169472,0.0420046,0.0459676,
        0.0080123,-0.00062911,0.000181517,0.000289464,
        -0.00062911,0.00323867,-0.000453955,0.000746526,
        0.000181517,-0.000453955,0.00102177,0.000682363,
        0.000289464,0.000746526,0.000682363,0.000877982,
        0.0186373,2.03553e-05,-1.29209e-05,0.000882582,
        2.03553e-05,0.0168163,-0.00111379,0.00485512,
        -1.29209e-05,-0.00111379,0.00821219,0.00641848,
        0.000882582,0.00485512,0.00641848,0.00740404,
        0.0570006,-5.06746e-06,3.54799e-06,0.00270358,
        -5.06746e-06,0.0574229,2.86102e-05,0.0192378,
        3.54799e-06,2.86102e-05,0.0533047,0.0469485,
        0.00270358,0.0192378,0.0469485,0.0510138,
        0.0729667,-2.65211e-05,6.82309e-06,0.00345581,
        -2.65211e-05,0.0724143,-0.000372013,0.0239837,
        6.82309e-06,-0.000372013,0.0662007,0.0584346,
        0.00345581,0.0239837,0.0584346,0.0638697
    };

    int rank_1 = 4;
    int size_1 = b0 * b1 * b2 * b3;
    int extents_1[] = {b0, b1, b2, b3};
    double data_1[b0][b1][b2][b3] = {    
        -2.06848e-06,-1.45573e-05,-3.81082e-05,4.45188e-05,
        -1.99738e-06,-1.40813e-05,-3.73384e-05,4.25935e-05,
        1.12557e-06,7.92852e-06,2.08902e-05,-2.40788e-05,
        1.10121e-06,7.75991e-06,2.05421e-05,-2.35726e-05,
        -1.45573e-05,-0.000102455,-0.00026831,0.000313211,
        -1.40813e-05,-9.92671e-05,-0.000263129,0.000300373,
        7.92854e-06,5.58474e-05,0.000147136,-0.000169646,
        7.7608e-06,5.46886e-05,0.000144773,-0.000166099,
        -3.81082e-05,-0.00026831,-0.000704616,0.000818146,
        -3.73384e-05,-0.000263129,-0.000695873,0.000798057,
        2.08915e-05,0.000147145,0.000387564,-0.000447508,
        2.0561e-05,0.000144889,0.000383342,-0.000439743,
        4.45188e-05,0.000313211,0.000818146,-0.000960057,
        4.25936e-05,0.000300373,0.000798058,-0.000906497,
        -2.4079e-05,-0.000169647,-0.000447479,0.000514189,
        -2.35562e-05,-0.000165965,-0.000439036,0.000505056,
        -1.99738e-06,-1.40813e-05,-3.73384e-05,4.25936e-05,
        -2.06846e-06,-1.45572e-05,-3.8108e-05,4.45185e-05,
        1.10106e-06,7.75881e-06,2.0539e-05,-2.35697e-05,
        1.12567e-06,7.92922e-06,2.08924e-05,-2.40804e-05,
        -1.40813e-05,-9.92671e-05,-0.000263129,0.000300373,
        -1.45572e-05,-0.000102455,-0.000268308,0.000313209,
        7.75971e-06,5.46808e-05,0.000144751,-0.000166079,
        7.92922e-06,5.58524e-05,0.000147151,-0.000169658,
        -3.73384e-05,-0.000263129,-0.000695873,0.000798058,
        -3.8108e-05,-0.000268308,-0.000704613,0.000818141,
        2.05581e-05,0.000144869,0.000383286,-0.000439687,
        2.08934e-05,0.000147158,0.000387603,-0.000447543,
        4.25935e-05,0.000300373,0.000798057,-0.000906497,
        4.45185e-05,0.000313209,0.000818141,-0.000960049,
        -2.35529e-05,-0.000165941,-0.000438971,0.000504993,
        -2.40809e-05,-0.000169661,-0.000447525,0.00051422,
        1.12557e-06,7.92854e-06,2.08915e-05,-2.4079e-05,
        1.10106e-06,7.75971e-06,2.05581e-05,-2.35529e-05,
        -2.74402e-05,-0.000193211,-0.000507647,0.000588856,
        -2.66848e-05,-0.000188143,-0.000499559,0.000568825,
        7.92852e-06,5.58474e-05,0.000147145,-0.000169647,
        7.75881e-06,5.46808e-05,0.000144869,-0.000165941,
        -0.000193211,-0.00136049,-0.00357567,0.00414527,
        -0.000188143,-0.00132646,-0.00352107,0.00401141,
        2.08902e-05,0.000147136,0.000387564,-0.000447479,
        2.0539e-05,0.000144751,0.000383286,-0.000438971,
        -0.000507647,-0.00357567,-0.0094199,0.0108734,
        -0.00049956,-0.00352108,-0.00932811,0.0106668,
        -2.40788e-05,-0.000169646,-0.000447508,0.000514189,
        -2.35697e-05,-0.000166079,-0.000439687,0.000504993,
        0.000588856,0.00414527,0.0108734,-0.0126541,
        0.000568826,0.00401142,0.0106668,-0.0121093,
        1.10121e-06,7.7608e-06,2.0561e-05,-2.35562e-05,
        1.12567e-06,7.92922e-06,2.08934e-05,-2.40809e-05,
        -2.66848e-05,-0.000188143,-0.00049956,0.000568826,
        -2.74457e-05,-0.00019325,-0.00050775,0.000588972,
        7.75991e-06,5.46886e-05,0.000144889,-0.000165965,
        7.92922e-06,5.58524e-05,0.000147158,-0.000169661,
        -0.000188143,-0.00132646,-0.00352108,0.00401142,
        -0.00019325,-0.00136076,-0.0035764,0.0041461,
        2.05421e-05,0.000144773,0.000383342,-0.000439036,
        2.08924e-05,0.000147151,0.000387603,-0.000447525,
        -0.000499559,-0.00352107,-0.00932811,0.0106668,
        -0.00050775,-0.0035764,-0.0094218,0.0108756,
        -2.35726e-05,-0.000166099,-0.000439743,0.000505056,
        -2.40804e-05,-0.000169658,-0.000447543,0.00051422,
        0.000568825,0.00401141,0.0106668,-0.0121093,
        0.000588972,0.0041461,0.0108756,-0.0126565
    };

    int rank_2 = 4;
    int size_2 = c0 * c1 * c2 * c3;
    int extents_2[] = {c0, c1, c2, c3};
    double data_2[c0][c1][c2][c3] = {0};

    double data_2_ref[c0][c1][c2][c3] = {
        0,     0,     0,     0,
        0,     0,     0,     0,
        0,     0,     0,     0,
        0,     0,     0,     0,
        0,     0,     0,     0,
        0,     0,     0,     0,
        0,     0,     0,     0,
        0,     0,     0,     0,
        0,     0,     0,     0,
        0,     0,     0,     0,
        0,     0,     0,     0,
        0,     0,     0,     0,
        0,     0,     0,     0,
        0,     0,     0,     0,
        0,     0,     0,     0,
        0,     0,     0,     0,
        0,     0,     0,     0,
        0,     0,     0,     0,
        0,     0,     0,     0,
        0,     0,     0,     0,
        -1.74e-10,-1.44462e-09,-8.58164e-09,-1.78631e-08,
        -3.18352e-11,-2.67597e-10,-2.12149e-09,-1.0811e-08,
        3.41388e-11,2.97966e-10,2.27577e-09,7.20658e-09,
        6.44217e-11,5.21099e-10,2.74915e-09,7.6207e-09,
        -1.69139e-09,-1.40415e-08,-8.28958e-08,-1.73332e-07,
        -3.22072e-10,-2.68824e-09,-2.02706e-08,-1.0495e-07,
        3.386e-10,2.9428e-09,2.19274e-08,6.99745e-08,
        6.26991e-10,5.07017e-09,2.64344e-08,7.39099e-08,
        -2.15171e-08,-1.79071e-07,-9.82289e-07,-1.84551e-06,
        1.40392e-09,8.20195e-09,-3.91948e-08,-8.33937e-07,
        1.44193e-09,1.5701e-08,1.66271e-07,6.2008e-07,
        7.52107e-09,6.08255e-08,2.82038e-07,7.29092e-07,
        -2.84598e-08,-2.36998e-07,-1.29248e-06,-2.36523e-06,
        3.32162e-09,2.19178e-08,-8.81148e-09,-9.91975e-07,
        1.1407e-09,1.50595e-08,1.98017e-07,7.60403e-07,
        9.83205e-09,7.9559e-08,3.66019e-07,9.19525e-07,
        0,     0,     0,     0,
        0,     0,     0,     0,
        0,     0,     0,     0,
        0,     0,     0,     0,
        0,     0,     0,     0,
        0,     0,     0,     0,
        0,     0,     0,     0,
        0,     0,     0,     0,
        0,     0,     0,     0,
        0,     0,     0,     0,
        0,     0,     0,     0,
        0,     0,     0,     0,
        0,     0,     0,     0,
        0,     0,     0,     0,
        0,     0,     0,     0,
        0,     0,     0,     0,
        0,     0,     0,     0,
        0,     0,     0,     0,
        0,     0,     0,     0,
        0,     0,     0,     0,
        -3.18412e-11,-2.67644e-10,-2.12163e-09,-1.08111e-08,
        -1.73985e-10,-1.44451e-09,-8.58102e-09,-1.78624e-08,
        6.44919e-11,5.21643e-10,2.75065e-09,7.62163e-09,
        3.40289e-11,2.97086e-10,2.27171e-09,7.20281e-09,
        -3.22131e-10,-2.6887e-09,-2.0272e-08,-1.04951e-07,
        -1.69126e-09,-1.40404e-08,-8.28899e-08,-1.73325e-07,
        6.27672e-10,5.07546e-09,2.6449e-08,7.39191e-08,
        3.37537e-10,2.93428e-09,2.18881e-08,6.9938e-08,
        1.40323e-09,8.19663e-09,-3.92085e-08,-8.33949e-07,
        -2.15151e-08,-1.79055e-07,-9.82205e-07,-1.84542e-06,
        7.53023e-09,6.08962e-08,2.82211e-07,7.29217e-07,
        1.42578e-09,1.55724e-08,1.65688e-07,6.19525e-07,
        3.32072e-09,2.1911e-08,-8.82842e-09,-9.91989e-07,
        -2.8457e-08,-2.36975e-07,-1.29237e-06,-2.3651e-06,
        9.84429e-09,7.96532e-08,3.66243e-07,9.19692e-07,
        1.11865e-09,1.48843e-08,1.97226e-07,7.59646e-07,
        0,     0,     0,     0,
        0,     0,     0,     0,
        0,     0,     0,     0,
        0,     0,     0,     0,
        0,     0,     0,     0,
        0,     0,     0,     0,
        0,     0,     0,     0,
        0,     0,     0,     0,
        0,     0,     0,     0,
        0,     0,     0,     0,
        0,     0,     0,     0,
        0,     0,     0,     0,
        0,     0,     0,     0,
        0,     0,     0,     0,
        0,     0,     0,     0,
        0,     0,     0,     0,
        0,     0,     0,     0,
        0,     0,     0,     0,
        0,     0,     0,     0,
        0,     0,     0,     0,
        3.41885e-11,2.98285e-10,2.27178e-09,7.20337e-09,
        6.20822e-11,5.01916e-10,2.65022e-09,7.53152e-09,
        -1.8858e-09,-1.57159e-08,-9.59212e-08,-2.17822e-07,
        -5.40361e-10,-4.47326e-09,-3.07116e-08,-1.46815e-07,
        3.39078e-10,2.94585e-09,2.18885e-08,6.99433e-08,
        6.04056e-10,4.88194e-09,2.54687e-08,7.30386e-08,
        -1.83482e-08,-1.52858e-07,-9.25251e-07,-2.11316e-06,
        -5.38721e-09,-4.43993e-08,-2.93063e-07,-1.42458e-06,
        1.45114e-09,1.57659e-08,1.65887e-07,6.19817e-07,
        7.31299e-09,5.91424e-08,2.72678e-07,7.21593e-07,
        -2.26167e-07,-1.89758e-06,-1.07759e-05,-2.20247e-05,
        -9.26859e-09,-1.08784e-07,-1.26211e-06,-1.18508e-05,
        1.15368e-09,1.51521e-08,1.97536e-07,7.60088e-07,
        9.57917e-09,7.7525e-08,3.54374e-07,9.10501e-07,
        -2.97206e-07,-2.49808e-06,-1.41584e-05,-2.81073e-05,
        3.49271e-09,-2.52827e-08,-1.21107e-06,-1.42991e-05,
        0,     0,     0,     0,
        0,     0,     0,     0,
        0,     0,     0,     0,
        0,     0,     0,     0,
        0,     0,     0,     0,
        0,     0,     0,     0,
        0,     0,     0,     0,
        0,     0,     0,     0,
        0,     0,     0,     0,
        0,     0,     0,     0,
        0,     0,     0,     0,
        0,     0,     0,     0,
        0,     0,     0,     0,
        0,     0,     0,     0,
        0,     0,     0,     0,
        0,     0,     0,     0,
        0,     0,     0,     0,
        0,     0,     0,     0,
        0,     0,     0,     0,
        0,     0,     0,     0,
        6.20923e-11,5.01989e-10,2.6501e-09,7.53194e-09,
        3.41333e-11,2.97835e-10,2.26926e-09,7.20104e-09,
        -5.40674e-10,-4.47546e-09,-3.07062e-08,-1.46811e-07,
        -1.88511e-09,-1.57104e-08,-9.58938e-08,-2.17818e-07,
        6.04155e-10,4.88266e-09,2.54675e-08,7.30426e-08,
        3.3855e-10,2.94154e-09,2.18642e-08,6.99207e-08,
        -5.39021e-09,-4.44203e-08,-2.9301e-07,-1.42455e-06,
        -1.83417e-08,-1.52805e-07,-9.24987e-07,-2.11312e-06,
        7.31395e-09,5.91489e-08,2.72631e-07,7.21586e-07,
        1.44048e-09,1.568e-08,1.65449e-07,6.19383e-07,
        -9.33387e-09,-1.09265e-07,-1.26154e-06,-1.18505e-05,
        -2.26011e-07,-1.89634e-06,-1.07699e-05,-2.2021e-05,
        9.58035e-09,7.75328e-08,3.54306e-07,9.10479e-07,
        1.13853e-09,1.50303e-08,1.96926e-07,7.59478e-07,
        3.39943e-09,-2.59737e-08,-1.21034e-06,-1.42988e-05,
        -2.9698e-07,-2.4963e-06,-1.41499e-05,-2.81015e-05
    };


    aoladder_contraction(dummy_slot, rank_0, &dummy_index_values[0], 
            size_0, &extents_0[0], &data_0[0][0][0][0],
            dummy_slot, rank_1, &dummy_index_values[0], 
            size_1, &extents_1[0], &data_1[0][0][0][0],
            dummy_slot, rank_2, &dummy_index_values[0], 
            size_2, &extents_2[0], &data_2[0][0][0][0],
            ierr);


    for (int i=0; i<c0; i++){
        for (int j=0; j<c1; j++){
            for (int k=0; k<c2; k++){
                for (int l=0; l<c3; l++){
                    double diff = data_2_ref[i][j][k][l] - data_2[i][j][k][l];
                    double absdiff = diff < 0 ? diff * -1 : diff;
                    if (absdiff > THRESHOLD)
                        std::cerr << "Error !, diff at location :["
                            <<i<<","<<j<<","<<k<<","<<l<<"]"<<std::endl;
                }
            }
        }
    }


    return 0;
}

